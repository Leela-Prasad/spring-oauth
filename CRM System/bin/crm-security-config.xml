
<beans:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
    
    <!-- This block is to setup authorizaiton and token endpoints 
         i.e., /oauth/authorize  and  /oauth/token 
         we can even override these defaults by defining spring controller
         in that case we don't need this block-->
    <oauth2:authorization-server client-details-service-ref="clientDetailsService">
    	<!-- This is to tell that we are doing Oauth full Authentication Grant type -->
    	<oauth2:authorization-code/>
    </oauth2:authorization-server>  
 	
 	<!-- This block is responsible for storing list of registered clients
 	     who want to do oauth authentication full Grant type for veryfing 
 	     client what they are saying. This block is an inmemory store for 
 	     development puropses, we can use a jdbc store where all the registered
 	     clients are stored, for this we have to use JdbcClientDetailsService-->
 	     
 	     <!-- This is something similar to the authentication-manager where 
 	     users who are doing are authenticated -->
 	<oauth2:client-details-service id="clientDetailsService">
 		<oauth2:client client-id="mailmonkey"
 						secret="somesecretkey"
 						authorities="ROLE_CLIENT"
 						scope="read"
 						authorized-grant-types="authorization_code"/>
 	</oauth2:client-details-service>
 	
 	
  <!--  <bean class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService" id="myClientDetails">
      <constructor-arg index="0">
         This is your jdbc datasource, i.e. db details
         <ref bean="dataSource" />
      </constructor-arg>
   </bean>
   
	   <bean id="clientDetailsUserService"
	class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
	        <constructor-arg ref="myClientDetails" />
	    </bean> -->
 	<!--  This is a basic security set up, currently for the web-tier only -->
 	
 	<beans:bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
 		<beans:constructor-arg ref="clientDetailsService" />
 	</beans:bean>
 	
 	
	<!--  For this course, we will use in memory authentication - see module 1 of Spring Security Course for details on JDBC providers -->
	<authentication-manager>
		<authentication-provider>
			<user-service>			
				<user name="rac" password="secret" authorities="ROLE_CRM_USER"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<authentication-manager id="oauthTokenEndpointAuthManager" >
		<authentication-provider user-service-ref="clientDetailsUserService">
		</authentication-provider>
	</authentication-manager>
	
	<!-- This bean is used to disable default http basic and enable token authentication -->
	<beans:bean id="oauthTokenEntry" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
	
	<!-- By default oauth filter is not added in the default filter chain so we need to add this manually
	 this oauth2:resource-server filter will autheticate tokens with the existing tokens in the memory. -->
	<oauth2:resource-server id="oauthFilter"/>
	
	<!--  This bean is used to enable Spring Expression Language i.e., #oauth2-->
	<beans:bean id="expressionHandler" class="org.springframework.security.oauth2.provider.expression.OAuth2WebSecurityExpressionHandler" />
	
	<!-- This oauthToken  -->
	<http pattern="/rest/customers" create-session="stateless" entry-point-ref="oauthTokenEntry">
		<!--  Here the access must be one who have oauth access token so the we have 
			validate based on the scope, here we have used spring expression language
			#oauth2, inorder to enable this SEL we have wire another bean called expression handler-->
		<intercept-url pattern="/rest/customers" access="#oauth2.hasScope('read')"/>
		
		<!-- By default oauth filter is not added in the default filter chain so we need to add this manually
		     by referencing resource-server where existing tokens are avialable and this filter must be added
		     in a specific position in the filter chain i.e., before PRE_AUTH_FILTER-->
		<custom-filter ref="oauthFilter" before="PRE_AUTH_FILTER"/>
		
		<expression-handler ref="expressionHandler"/>
		
		<!-- Here we need to enable token authentication using oauth so we have to disable http basic entry point and plug 
		    in token authentication entry point, unfortunately we dont have any tag to plug in but we can write a bean 
		    to this-->
		<!-- <http-basic /> -->
	</http>
	
	<!-- This is to intercept oauth token endpoint -->
	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauthTokenEndpointAuthManager">
		<intercept-url pattern="/oauth/token" access="hasRole('ROLE_CLIENT')" />
		<http-basic/>
		
		<!-- oauth is not working if we don't disable csrf, which is ok
		     as rest endpoints doesn't need csrf because csrf is required if we want session
		     but rest is stateless, where we will send credentials for every request-->
		<csrf disabled="true"/>
	</http>
	
	<!--  this is the vanilla website settings...-->
	<http pattern="/**">
		<!-- *** Here we have secure /oauth/authorize so that it will produce
		     a login to the resource owner -->	
		<intercept-url pattern="/oauth/**" access="hasRole('ROLE_CRM_USER')"/>
		<intercept-url pattern="/login.jsp" access="permitAll()"/>
		<intercept-url pattern="/css/**" access="permitAll()"/>		
		<intercept-url pattern="/login" access="permitAll()"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_CRM_USER')"/>
		<form-login login-page="/login.jsp"
					authentication-failure-url="/login.jsp?error=1"
					login-processing-url="/login"/>
					
		<logout logout-success-url="/website/all-customers.html"/>
							
		<csrf/> 		
	</http>
	
</beans:beans>	