
<beans:beans xmlns="http://www.springframework.org/schema/security" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	  
	 
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 
        http://www.springframework.org/schema/security/spring-security-oauth2.xsd">
    
	<authentication-manager>
		<authentication-provider>
			<user-service>			
				<user name="mm" password="mm" authorities="ROLE_MAIL_USER"/>
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<http pattern="/**">	
		<intercept-url pattern="/login.jsp" access="permitAll()" requires-channel="https"/>
		<intercept-url pattern="/css/**" access="permitAll()" requires-channel="https"/>		
		<intercept-url pattern="/images/**" access="permitAll()" requires-channel="https"/>		
		
		<intercept-url pattern="/login" access="permitAll()" requires-channel="https"/>
		<intercept-url pattern="/**" access="hasRole('ROLE_MAIL_USER')" requires-channel="https"/>
		
		<form-login login-page="/login.jsp"
					authentication-failure-url="/login.jsp?error=1"
					login-processing-url="/login"/>
		
		<logout logout-success-url="/build-newsletter.html"/>
		
		<!-- This filter will kick in when an exception is thrown that client app
		mail monkey does have leg1 code to kick in leg2, so this filter will do 
		leg1 process automatically and avoides a get request to /oauth/authorize manually
		 and this will also make redirect uri to be redundent as it will redirect to the same
		 page where client is in-->
		<custom-filter ref="leg1Filter" after="EXCEPTION_TRANSLATION_FILTER"/>		
		<csrf/>
		
		<!-- This port mapping is needed when you are not redirecting to standard ports i.e., http(8080), https(8443) -->
		<port-mappings>
			<port-mapping http="8180" https="8543"/>
		</port-mappings>
	</http>
	
	<!-- This will avoid a get request to the /oauth/authorize request -->
	<oauth2:client id="leg1Filter"/>
	
	<!-- This will make /oauth/token post request automatically-->
	<oauth2:resource id="crmResource" client-id="mailmonkey"
					 					client-secret="somesecretkey"
					 					type="authorization_code"
					 					user-authorization-uri="https://localhost:8443/crm/oauth/authorize"
					 					access-token-uri="https://localhost:8443/crm/oauth/token"
					 					scope="read,write"
					 					/>
					 
	<oauth2:rest-template id="oauthTemplate" resource="crmResource"></oauth2:rest-template>				 
</beans:beans>	